%package "oberon";
%class "OberonParser";

%terminals OP_TIMES, OP_DIV, OP_MOD, OP_AND, OP_PLUS, OP_MINUS, OP_OR;
%terminals EQUALS, HASHTAG, SMALLER, SMALLEREQ, GREATER, GREATEREQ, DOT, COMMA, COLON, RPAREN, RBRACE;
%terminals OF, THEN, DO, LPAREN, LBRACE, TILDE, ASSIGN, SEMICOLON;
%terminals END, ELSE, ELSEIF,IF,WHILE;
%terminals ARRAY, RECORD,CONST,TYPE,VAR,PROCEDURE,BEGIN,MODULE;
%terminals IDENTIFIER, NUMBER;

%embed {: 

	public final static class Events extends Parser.Events{
		public void syntaxError(Symbol token){
			throw new RuntimeException(token.value.toString());
		}
	}
 :};
 
%init {: 		report = new Events(); :} ;

%goal module;



selector  = 
          | selector2 selector;
selector2 = DOT IDENTIFIER
          | LBRACE expression RBRACE;

factor	  = IDENTIFIER selector 
          | NUMBER 
		  | LPAREN expression RPAREN 
		  | TILDE factor;

term      = factor term2;
term2     = 
          | term3 factor term2;
term3     = OP_TIMES
          | OP_DIV
		  | OP_MOD
		  | OP_AND;

SimpleExpression  = SimpleExpression2? term SimpleExpression4;
SimpleExpression2 = OP_PLUS | OP_MINUS;
SimpleExpression3 = OP_PLUS | OP_MINUS | OP_OR;
SimpleExpression4 = 
				  | SimpleExpression3 term SimpleExpression4;


expression = SimpleExpression expression3?;
expression2 = EQUALS | HASHTAG | SMALLER | SMALLEREQ | GREATER | GREATEREQ;
expression3 = expression2 SimpleExpression;

assignment = IDENTIFIER selector ASSIGN expression;
 
ActualParameters = LPAREN ActualParameters3? RPAREN;
ActualParameters2 =
                  | COMMA expression ActualParameters2;
ActualParameters3 = expression ActualParameters2;
				  
ProcedureCall = IDENTIFIER selector ActualParameters?; 

IfStatement = IF expression THEN StatementSequence IfStatement2 IfStatement3? END;
IfStatement2 = ELSEIF expression THEN StatementSequence IfStatement2;
IfStatement3 = ELSE StatementSequence;
 
WhileStatement = WHILE expression DO StatementSequence END;

statement  = statement2?;
statement2 = assignment | ProcedureCall | IfStatement | WhileStatement;

StatementSequence = statement StatementSequence2;
StatementSequence2 = 
                   | SEMICOLON statement;

IdentList = IDENTIFIER IdentList2;
IdentList2 = 
		   | COMMA IDENTIFIER IdentList2;

ArrayType = ARRAY expression OF type;

FieldList  = FieldList2?;
FieldList2 = IdentList COLON type;

RecordType  = RECORD FieldList RecordType2 END;
RecordType2 = 
            | SEMICOLON FieldList RecordType2;

type = IDENTIFIER | ArrayType | RecordType;

FPSection = VAR? IdentList COLON type;

FormalParameters  = LPAREN FormalParameters3? RPAREN;
FormalParameters2 = 
                  | SEMICOLON FPSection FormalParameters2;
FormalParameters3 = FPSection FormalParameters2;

ProcedureHeading = PROCEDURE IDENTIFIER FormalParameters?;

ProcedureBody = declarations ProcedureBody2? END IDENTIFIER;
ProcedureBody2 = BEGIN StatementSequence;

ProcedureDeclaration = ProcedureHeading SEMICOLON ProcedureBody;

declarations = declarations3? declarations5? declarations7? declarations8;
declarations2 = IDENTIFIER EQUALS expression SEMICOLON declarations2;
declarations3 = CONST declarations2;
declarations4 = 
              |IDENTIFIER EQUALS type SEMICOLON declarations4;
declarations5 =  TYPE declarations4;
declarations6 =  
              | IdentList COLON type SEMICOLON declarations6; 
declarations7 =  VAR declarations6;
declarations8 = 
              | ProcedureDeclaration SEMICOLON declarations8;
			  
			  

module = MODULE IDENTIFIER SEMICOLON declarations module2? END IDENTIFIER DOT; 
module2 = BEGIN StatementSequence;