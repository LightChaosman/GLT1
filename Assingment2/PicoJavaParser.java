package PicoJava;

import PicoJavaParser.Terminals;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "PicoJava.grammar".
 */
public class PicoJavaParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short IDENTIFIER = 1;
		static public final short LPAREN = 2;
		static public final short BOOLEAN = 3;
		static public final short OP_AND = 4;
		static public final short OP_OR = 5;
		static public final short LBRACE = 6;
		static public final short RBRACE = 7;
		static public final short WHILE = 8;
		static public final short DOT = 9;
		static public final short RPAREN = 10;
		static public final short CLASS = 11;
		static public final short SEMICOLON = 12;
		static public final short ASSIGN = 13;
		static public final short EXTENDS = 14;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njabjF6b4KXTVC21HG0QiW5LGAhLfzQDJO66DuuQ4FlSO7aoRzB$xStblhfTxgxdVE72Q" +
		"JXY7VtkkiSzdda2tfe#QKgAA1dgYeANNKr0ELSVkPMxA$UkhTAkwccPwv6Uy#LEpTLQtO9t" +
		"NvBUgH5lYbthbQgGgnvkTJNT1ZF#gexVC6QYauFLXNt#uqhHbkEAi6rUfsHkvgNijQuwmYe" +
		"pdkC4#zckhiRPEZd5lYtiwjujQaCEFSY9SwD#Rq9TvMvlK5Qiq4hqZbLALnri#dkiH$uqQk" +
		"fikLJBdiY5WJyP8YLIAgjL0HDQPHCVVOEY6OsIsf3LNOSnvV4ruwFORlBMp0gp0#WlT1ByE" +
		"Re7im27eJXl0SHl0EZdDdxi1klaxmFy0#7C3hu7L3heHxduxNe#$#FoEiVG67GGydhM7lLM" +
		"xzzdXVpXlbzC6aCyBSk4uvvsqf##pUnrkxiUlWNFdusyS$Ffx2T$XcFucVxOTtlzeNkxIBx" +
		"AHVFhNe6TT12JqcYEcsA6EHNcWpr$2zwFf04BChel#cwC22xv6K9AFckpHHvn#XAsxr");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	private final Action[] actions;

	public PicoJavaParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = block
			RETURN3,	// [1] block = LBRACE block_statements RBRACE; returns 'RBRACE' although none is marked
			Action.NONE,  	// [2] block_statements = 
			RETURN2,	// [3] block_statements = block_statement block_statements; returns 'block_statements' although none is marked
			Action.RETURN,	// [4] block_statement = class_decl
			Action.RETURN,	// [5] block_statement = var_decl
			Action.RETURN,	// [6] block_statement = stmt
			RETURN4,	// [7] class_decl = CLASS IDENTIFIER extends_opt block; returns 'block' although none is marked
			RETURN3,	// [8] var_decl = name IDENTIFIER SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [9] stmt = assign_stmt
			Action.RETURN,	// [10] stmt = while_stmt
			Action.NONE,  	// [11] extends_opt = 
			RETURN2,	// [12] extends_opt = EXTENDS use; returns 'use' although none is marked
			Action.RETURN,	// [13] use = IDENTIFIER
			RETURN4,	// [14] assign_stmt = name ASSIGN exp SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN5,	// [15] while_stmt = WHILE LPAREN exp RPAREN stmt; returns 'stmt' although none is marked
			Action.RETURN,	// [16] exp = name
			Action.RETURN,	// [17] exp = BOOLEAN
			RETURN3,	// [18] exp = exp OP_AND exp; returns 'exp' although none is marked
			RETURN3,	// [19] exp = exp OP_OR exp; returns 'exp' although none is marked
			RETURN3,	// [20] exp = LPAREN exp RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [21] name = IDENTIFIER
			RETURN3	// [22] name = name DOT use; returns 'use' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
