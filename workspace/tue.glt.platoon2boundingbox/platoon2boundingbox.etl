pre {
  "Converting platoon to bounding box".println();
}

rule RouteToBox 
  transform plat : platoon!World
  to box : boundingbox!World {
  
  	var route: platoon!Route;
  	route = plat.routes;
  	
  	// Initialize the list of boundingbox commands
  	box.moveCommands = new List;
  	var mc = box.moveCommands;
  	
  	var dir = 0; // Initial direction is: north
  	
  	// Go through all the steps and add them to the output model
  	// Design desision: Movements of length 0 are added to the bounding box.
  	// So when (Right, Right, Forward 0) is a route, then (Down 0) is the output. 
  	for(step in route.steps)
  	{
  		if(step.isTypeOf(platoon!TurnLeft))
  		{
  			// Turn direction to the left
  			dir = (dir + 1);
  			dir = dir.mod(4);
  		}else if(step.isTypeOf(platoon!TurnRight)){
  			// Turn direction to the right
  			dir = (dir + 3);
  			dir = dir.mod(4);
  		}else{
  			// Forward movement
  			var command: boundingbox!Move;
  			switch(dir){
  				case(0): // North
  					command = new boundingbox!MoveUp;
  					break;
  				case(1): // West
  					command = new boundingbox!MoveLeft;
  					break;
  				case(2): // South
  					command = new boundingbox!MoveDown;
  					break;
  				case(3): // East
  					command = new boundingbox!MoveRight;
  					break;
  				default:
  					throw "Direction not known";
  			}
  			command.distance = step.distance;
  			// Add the next step to the movecommands
  			mc.add(command);
  		}
  	}
}

// Returns the modulo i of an integer
operation Integer mod(i : Integer) {
  return self - (self / i * i);
}

post {
  "Bounding box model created".println();
}
