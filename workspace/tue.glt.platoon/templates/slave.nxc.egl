[% // File template for generating slave.nxc
%]
/**
 * Generated file from autoconnect.egl
 * This file contains the NXC code for a following platoon vehicle
 */

#ifndef __AUTOCONNECT_LIB__NXC
#define __AUTOCONNECT_LIB__NXC

// The master tries to connect to the slave "name".
void ConnectNXT(const string name, byte channel)
{
	CommBTConnectionType args;
	args.Name = name;
	args.ConnectionSlot = channel;
	args.Action = TRUE;
	
	if(!BluetoothStatus(channel) == NO_ERR)
	{
		SysCommBTConnection(args); // try to connect.
		Wait(5000); // let the connection get created
	}
}

#endif

// Bluetooth constants
#define BT_CONN 1
#define BT_INBOX 1
#define BT_OUTBOX 5

// Motor constants
#define MOTOR_CASUAL 33 // speed for casual following
#define MOTOR_HURRY 66 // speed for catching up small delays
#define MOTOR_PANIC 100 // speed for catching up as fast as possible
#define MOTOR_TURN_TIME 1500
#define MOTOR_L OUT_A
#define MOTOR_R OUT_B
#define MOTOR_RL OUT_AB 

[%
	var cs = platoon.constraints.list;// extract headway information.
	var c;
	for(c2 in cs)
	{
		c = c2; // hacky way to extract first and only contraint: headway
	}
	var lb = c.lowbound;
	var ub = c.upbound;
	var steps = platoon.routes.steps;
	var commax = steps.size();
%]

//headway information
#define DIST_MIN [%=lb%]
#define DIST_MAX [%=ub%]
#define DIST_RANGE [%=ub-lb%]
#define DIST_HURRY [%=lb+(ub-lb)/3%] // if further away than this, hurry up
#define DIST_PANIC [%=lb+2*(ub-lb)/3%] // if further away than this, panic, full throtle

#define COM_MAX [%=commax%]
#define RESOLUTION 5 //The ammount of miliseconds between state updates


string commands[]; //The list of commands to be executed
int curCommand; //the index of the next command
string command;

int progress = 0;
int reqprogress = 0;

sub exec(int dist)//subroutine that executes commands
{
	if(command == "" || progress == reqprogress)//There is no new task or we have completed our task
	{
		string curcom = commands[curCommand];
		Off(MOTOR_RL);//switch off motors
		if(curcom !="")
		{
			command = curcom;
			progress = 0;
			string actualcom1 = SubStr(command,Pos("_",command)+1,StrLen(command));
			char type1 = StrIndex(actualcom1,0);//first character of command
			if(type1=='f')
			{
				string actualcom2 = SubStr(actualcom1,Pos("_",actualcom1)+1,StrLen(actualcom1));
				int d = StrToNum(actualcom2);//The distance to cover
				reqprogress = 1000*d;//TODO Rather arbitrary....
			}else
			{
				reqprogress = 500*66;// Rather arbitrary...
			}
			curCommand++;
		}else
		{
			return;
		}
	}
	string actualcom = SubStr(command,Pos("_",command)+1,StrLen(command));
	char type = StrIndex(actualcom,0);//first character of command
	
	switch(type){
		case 'f':
			int speed;
			if(dist<DIST_MIN)
			{
				speed = 0;
			}else if(dist < DIST_HURRY)
			{
				speed = MOTOR_CASUAL;
			}else if(dist < DIST_PANIC)
			{
				speed = MOTOR_HURRY;
			}else
			{
				speed = MOTOR_PANIC;
			}
			OnFwd(MOTOR_RL, speed);
			progress += speed * RESOLUTION;
			break;
		case 'l':
			OnFwd(MOTOR_R, MOTOR_HURRY); OnRev(MOTOR_L, MOTOR_HURRY);
			progress += MOTOR_HURRY * RESOLUTION;
			break;
		case 'r':
			OnFwd(MOTOR_L, MOTOR_HURRY); OnRev(MOTOR_R, MOTOR_HURRY);
			progress += MOTOR_HURRY * RESOLUTION;
			break;
		default:
			break;
	}
}


task main() {
	ArrayInit(commands, "", COM_MAX);
	curCommand = 0;
	command = "";
	string in;
	//ConnectNXT(?, ?);//Connect to slave
		
	do {
		// Wait for commands from master
		ReceiveRemoteString(BT_INBOX, true, in);
		if(in !="")
		{
			int idx = StrToNum(SubStr(in,0,Pos("_",in)));
			commands[idx] = in ;
		}
		
		int dist = Sensor(SENSOR_DISTANCE);
		exec(dist);
		Wait(RESOLUTION);
	} while(true);
}

