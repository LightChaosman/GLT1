[% // File template for generating output/master.nxc
%]
/**
 * Generated file from autoconnect.egl
 * This file contains the NXC code for the leading platoon vehicle
 */

#ifndef __AUTOCONNECT_LIB__NXC
#define __AUTOCONNECT_LIB__NXC

// The master tries to connect to the slave "name".
void ConnectNXT(const string name, byte channel)
{
	CommBTConnectionType args;
	args.Name = name;
	args.ConnectionSlot = channel;
	args.Action = TRUE;
	
	if (!BluetoothStatus(channel) == NO_ERR)
	{
		SysCommBTConnection(args); // try to connect.
		Wait(5000); // let the connection get created
	}
}

#endif

// Bluetooth constants
#define BT_CH_SLAVE 2
#define BT_OUT_SLAVE 5

// Motor constants
#define MOTOR_CASUAL 33	// Speed for casual following
#define MOTOR_HURRY 66	// Speed for catching up small delays
#define MOTOR_PANIC 100	// Speed for catching up as fast as possible
#define MOTOR_L OUT_A	// Port of motor for left wheel
#define MOTOR_R OUT_B	// Port of motor for right wheel
#define MOTOR_RL OUT_AB // Port of motors for both wheels
#define FWD_STEPS 1000	// An amount that determines how far the robot moves forward per unit
#define TURN_STEPS 666	// An amount that determines how far the robot rotates per turn

// Platooning constants
#define COM_MAX [%=world.routes.steps.size()%]
#define NUM_VEHICLES [%=world.platoon.followers.size()+1%]
#define RESOLUTION 5 // The ammount of miliseconds between state updates

// Internal variables
string commands[];	// The list of commands to be executed
int curCommand;		// The index of the current command
string command;

int progress = 0;
int reqprogress = 0;

string names[];		// Names of all vehicles in the platoon
string name;		// Name of this vehicle
int nameIdx;			// Index of this vehicle
string slaveName;	// Name of the direct follower

sub acquireNames()
{
	name = "[%=world.platoon.leader.name%]";
	ArrayInit(names, "", NUM_VEHICLES);
	names[0] = "[%=world.platoon.leader.name%]";
	[%
	// Print all following vehicle names
	var max = world.platoon.followers.size();
	
	var i  = 1;
	while(i<max+1)
	{
		out.println("    names[" + i + "] = "
			+ "\"" + world.platoon.followers[i-1].name + "\";");
		i++;
	}
	%]
	nameIdx=0;
	
	if (NUM_VEHICLES > 1)
	{
		slaveName = names[1];
	}
	else
	{
		// This is the last vehicle
		slaveName = "";
	}
}

// Get the predfined route
sub acquireRoute()
{
	ArrayInit(commands, "", COM_MAX);
	[%
	var max = world.routes.steps.size();
	var i  = 0;
	while(i<max)
	{
		var com = i + "_";
		var step = world.routes.steps[i];
		if (step.isTypeOf(Forward))
		{
			com += "f_"+step.distance;
		}
		else if (step.isTypeOf(TurnLeft))
		{
			com += "l";
		}
		else
		{
			com+= "r";
		}
		out.println("	   commands[" + i + "] = \"" + com + "\";");
		i++;
	}
	%]
}

// Execute the current command
sub exec()
{
	if (command == "" || progress >= reqprogress)
	{
		// There is no new task or we have completed our task
		// This part prepares the next statement, if there is any
		string curcom = commands[curCommand];
		Off(MOTOR_RL); // Switch off motors
		if (curcom !="")
		{
			command = curcom;
			progress = 0;
			string actualcom1 = SubStr(command,Pos("_",command)+1,StrLen(command));
			char type1 = StrIndex(actualcom1,0);//first character of command
			if (type1=='f')
			{
				string actualcom2 = SubStr(actualcom1,Pos("_",actualcom1)+1,StrLen(actualcom1));
				int d = StrToNum(actualcom2); // The distance to cover
				reqprogress = FWD_STEPS * d;
			}
			else
			{
				reqprogress = TURN_STEPS;
			}
			curCommand++;
		}
		else
		{
			return;
		}
	}
	string actualcom = SubStr(command, Pos("_", command) + 1, StrLen(command));
	char type = StrIndex(actualcom, 0); // First character of command
	
	// Execute the current statement
	switch (type) {
		case 'f':
			int speed = MOTOR_CASUAL;
			OnFwd(MOTOR_RL, speed);
			progress += speed * RESOLUTION;
			break;
		case 'l':
			OnFwd(MOTOR_R, MOTOR_HURRY); OnRev(MOTOR_L, MOTOR_HURRY);
			progress += MOTOR_HURRY * RESOLUTION;
			break;
		case 'r':
			OnFwd(MOTOR_L, MOTOR_HURRY); OnRev(MOTOR_R, MOTOR_HURRY);
			progress += MOTOR_HURRY * RESOLUTION;
			break;
		default:
			break;
	}
}

task main(){
	acquireRoute();
	acquireNames();
	
	string in;
	if (slaveName != "")
	{
		// Connect to the next vehicle
		ConnectNXT(slaveName, BT_CH_SLAVE);
	}	
	do {
		// Send current command to slave
		SendRemoteString(BT_OUT_SLAVE, true, command);
		// Continue execution
		exec();
		Wait(RESOLUTION);
	} while (true);
}
