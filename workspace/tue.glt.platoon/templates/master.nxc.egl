/**
 * Generated file from autoconnect.egl
 * This file contains the NXC code for the leading platoon vehicle
 */

#ifndef __AUTOCONNECT_LIB__NXC
#define __AUTOCONNECT_LIB__NXC

// The master tries to connect to the slave "name".
void ConnectNXT(const string name, byte channel)
{
	CommBTConnectionType args;
	args.Name = name;
	args.ConnectionSlot = channel;
	args.Action = TRUE;
	
	if(!BluetoothStatus(channel) == NO_ERR)
	{
		SysCommBTConnection(args); // try to connect.
		Wait(5000); // let the connection get created
	}
}

#endif

// Bluetooth constants
#define BT_CONN 1
#define BT_INBOX 1
#define BT_OUTBOX 5

#define MOTOR_POWER 33
[%/*No need for other levels -> master vehicle*/%]

#define COM_MAX [%=platoon.routes.steps.size()%]


string commands[]; //The list of commands to be executed
int curCommand; //the index of the current command


int progress = 0;
int reqprogress = 0;

string names[];
string name; //my name
int nameIdx; // index of this vehicle
string slaveName; //name of direct follower

sub acquireNames()
{
	name = [%=platoon.platoon.leader.name%];
	ArrayInit(names, "", NUM_VEHICLES);
	names[0]="[%=platoon.platoon.leader.name%]";
	[%
		var max = platoon.platoon.followers.size();
		
		var i  = 1;
		while(i<max+1)
		{
			
			%]
	names[[%=i%]] = "[%=platoon.platoon.followers[i-1].name%]";
			[%
			i++;
		}
	%]
	nameIdx=0;
	
	if(NUM_VEHICLES >1)
	{
		slaveName = names[1];
	}else//last vehicle
	{
		slaveName = "";
	}
}

sub acquireRoute()
{
	ArrayInit(commands, "", COM_MAX);
	[%
		var max = platoon.routes.steps.size();
		var i  = 0;
		while(i<max)
		{
			var com = i + "_";
			var step = platoon.routes.steps[i];
			if(step.isTypeOf(Forward))
			{
				com += "f_"+step.distance;
			}else if(step.isTypeOf(TurnLeft))
			{
				com += "l";
			}else
			{
				com+= "r";
			}
			%]
	commands[[%=i%]] = "[%=com%]";
			[%
			i++;
		}
	%]
}

task main(){
	acquireRoute();
	acquireNames();
 
}
