/*
 * generated by Xtext 2.10.0
 */
grammar InternalPDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package tue.glt.platoon.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tue.glt.platoon.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tue.glt.platoon.dsl.services.PDSLGrammarAccess;

}

@parser::members {

 	private PDSLGrammarAccess grammarAccess;

    public InternalPDSLParser(TokenStream input, PDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "World";
   	}

   	@Override
   	protected PDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorldRule()); }
	iv_ruleWorld=ruleWorld
	{ $current=$iv_ruleWorld.current; }
	EOF;

// Rule World
ruleWorld returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getPlatoonPlatoonParserRuleCall_0_0());
				}
				lv_platoon_0_0=rulePlatoon
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"platoon",
						lv_platoon_0_0,
						"tue.glt.platoon.dsl.PDSL.Platoon");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getRoutesRouteParserRuleCall_1_0());
				}
				lv_routes_1_0=ruleRoute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"routes",
						lv_routes_1_0,
						"tue.glt.platoon.dsl.PDSL.Route");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getConstraintsConstraintsParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_2_0,
						"tue.glt.platoon.dsl.PDSL.Constraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStepAccess().getForwardParserRuleCall_0());
		}
		this_Forward_0=ruleForward
		{
			$current = $this_Forward_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStepAccess().getTurnLeftParserRuleCall_1());
		}
		this_TurnLeft_1=ruleTurnLeft
		{
			$current = $this_TurnLeft_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStepAccess().getTurnRightParserRuleCall_2());
		}
		this_TurnRight_2=ruleTurnRight
		{
			$current = $this_TurnRight_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintAccess().getHeadwayParserRuleCall());
	}
	this_headway_0=ruleheadway
	{
		$current = $this_headway_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePlatoon
entryRulePlatoon returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlatoonRule()); }
	iv_rulePlatoon=rulePlatoon
	{ $current=$iv_rulePlatoon.current; }
	EOF;

// Rule Platoon
rulePlatoon returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='platoon:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlatoonAccess().getPlatoonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getLeaderLeadVehicleParserRuleCall_1_0());
				}
				lv_leader_1_0=ruleLeadVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					set(
						$current,
						"leader",
						lv_leader_1_0,
						"tue.glt.platoon.dsl.PDSL.LeadVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getFollowersFollowVehicleParserRuleCall_2_0());
				}
				lv_followers_2_0=ruleFollowVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					add(
						$current,
						"followers",
						lv_followers_2_0,
						"tue.glt.platoon.dsl.PDSL.FollowVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRoute
entryRuleRoute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteRule()); }
	iv_ruleRoute=ruleRoute
	{ $current=$iv_ruleRoute.current; }
	EOF;

// Rule Route
ruleRoute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='route'
		{
			newLeafNode(otherlv_0, grammarAccess.getRouteAccess().getRouteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tue.glt.platoon.dsl.PDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRouteAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_3_0());
				}
				lv_steps_3_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"steps",
						lv_steps_3_0,
						"tue.glt.platoon.dsl.PDSL.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_4_0());
				}
				lv_steps_4_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"steps",
						lv_steps_4_0,
						"tue.glt.platoon.dsl.PDSL.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstraints
entryRuleConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsRule()); }
	iv_ruleConstraints=ruleConstraints
	{ $current=$iv_ruleConstraints.current; }
	EOF;

// Rule Constraints
ruleConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getListConstraintParserRuleCall_1_0());
				}
				lv_list_1_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					set(
						$current,
						"list",
						lv_list_1_0,
						"tue.glt.platoon.dsl.PDSL.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeadVehicle
entryRuleLeadVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeadVehicleRule()); }
	iv_ruleLeadVehicle=ruleLeadVehicle
	{ $current=$iv_ruleLeadVehicle.current; }
	EOF;

// Rule LeadVehicle
ruleLeadVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LV'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeadVehicleAccess().getLVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeadVehicleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeadVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tue.glt.platoon.dsl.PDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='route'
		{
			newLeafNode(otherlv_2, grammarAccess.getLeadVehicleAccess().getRouteKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeadVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLeadVehicleAccess().getRouteRouteCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFollowVehicle
entryRuleFollowVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowVehicleRule()); }
	iv_ruleFollowVehicle=ruleFollowVehicle
	{ $current=$iv_ruleFollowVehicle.current; }
	EOF;

// Rule FollowVehicle
ruleFollowVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FV'
		{
			newLeafNode(otherlv_0, grammarAccess.getFollowVehicleAccess().getFVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFollowVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tue.glt.platoon.dsl.PDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='front'
		{
			newLeafNode(otherlv_2, grammarAccess.getFollowVehicleAccess().getFrontKeyword_2());
		}
		otherlv_3='runner'
		{
			newLeafNode(otherlv_3, grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFollowVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleForward
entryRuleForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardRule()); }
	iv_ruleForward=ruleForward
	{ $current=$iv_ruleForward.current; }
	EOF;

// Rule Forward
ruleForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forward('
		{
			newLeafNode(otherlv_0, grammarAccess.getForwardAccess().getForwardKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_1_0());
				}
				lv_distance_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForwardRule());
					}
					set(
						$current,
						"distance",
						lv_distance_1_0,
						"tue.glt.platoon.dsl.PDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getForwardAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleTurnLeft
entryRuleTurnLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnLeftRule()); }
	iv_ruleTurnLeft=ruleTurnLeft
	{ $current=$iv_ruleTurnLeft.current; }
	EOF;

// Rule TurnLeft
ruleTurnLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnLeftAccess().getTurnLeftAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnLeftAccess().getTurnKeyword_1());
		}
		otherlv_2='Left'
		{
			newLeafNode(otherlv_2, grammarAccess.getTurnLeftAccess().getLeftKeyword_2());
		}
	)
;

// Entry rule entryRuleTurnRight
entryRuleTurnRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRightRule()); }
	iv_ruleTurnRight=ruleTurnRight
	{ $current=$iv_ruleTurnRight.current; }
	EOF;

// Rule TurnRight
ruleTurnRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnRightAccess().getTurnRightAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnRightAccess().getTurnKeyword_1());
		}
		otherlv_2='Right'
		{
			newLeafNode(otherlv_2, grammarAccess.getTurnRightAccess().getRightKeyword_2());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleheadway
entryRuleheadway returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadwayRule()); }
	iv_ruleheadway=ruleheadway
	{ $current=$iv_ruleheadway.current; }
	EOF;

// Rule headway
ruleheadway returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadwayAccess().getLowboundEIntParserRuleCall_0_0());
				}
				lv_lowbound_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadwayRule());
					}
					set(
						$current,
						"lowbound",
						lv_lowbound_0_0,
						"tue.glt.platoon.dsl.PDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<='
		{
			newLeafNode(otherlv_1, grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_1());
		}
		otherlv_2='headway'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeadwayAccess().getHeadwayKeyword_2());
		}
		otherlv_3='<='
		{
			newLeafNode(otherlv_3, grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadwayAccess().getUpboundEIntParserRuleCall_4_0());
				}
				lv_upbound_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadwayRule());
					}
					set(
						$current,
						"upbound",
						lv_upbound_4_0,
						"tue.glt.platoon.dsl.PDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
