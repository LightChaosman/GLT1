/*
 * generated by Xtext 2.10.0
 */
package tue.glt.platoon.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlatoonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlatoonPlatoonParserRuleCall_0_0 = (RuleCall)cPlatoonAssignment_0.eContents().get(0);
		private final Assignment cRoutesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoutesRouteParserRuleCall_1_0 = (RuleCall)cRoutesAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintsParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		
		//World:
		//	platoon=Platoon
		//	routes=Route
		//	constraints=Constraints;
		@Override public ParserRule getRule() { return rule; }
		
		//platoon=Platoon routes=Route constraints=Constraints
		public Group getGroup() { return cGroup; }
		
		//platoon=Platoon
		public Assignment getPlatoonAssignment_0() { return cPlatoonAssignment_0; }
		
		//Platoon
		public RuleCall getPlatoonPlatoonParserRuleCall_0_0() { return cPlatoonPlatoonParserRuleCall_0_0; }
		
		//routes=Route
		public Assignment getRoutesAssignment_1() { return cRoutesAssignment_1; }
		
		//Route
		public RuleCall getRoutesRouteParserRuleCall_1_0() { return cRoutesRouteParserRuleCall_1_0; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_2_0() { return cConstraintsConstraintsParserRuleCall_2_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForwardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnLeftParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTurnRightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Step:
		//	Forward | TurnLeft | TurnRight;
		@Override public ParserRule getRule() { return rule; }
		
		//Forward | TurnLeft | TurnRight
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_0() { return cForwardParserRuleCall_0; }
		
		//TurnLeft
		public RuleCall getTurnLeftParserRuleCall_1() { return cTurnLeftParserRuleCall_1; }
		
		//TurnRight
		public RuleCall getTurnRightParserRuleCall_2() { return cTurnRightParserRuleCall_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Constraint");
		private final RuleCall cHeadwayParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Constraint:
		//	headway;
		@Override public ParserRule getRule() { return rule; }
		
		//headway
		public RuleCall getHeadwayParserRuleCall() { return cHeadwayParserRuleCall; }
	}
	public class VehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Vehicle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeadVehicleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFollowVehicleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Vehicle:
		//	LeadVehicle | FollowVehicle;
		@Override public ParserRule getRule() { return rule; }
		
		//LeadVehicle | FollowVehicle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeadVehicle
		public RuleCall getLeadVehicleParserRuleCall_0() { return cLeadVehicleParserRuleCall_0; }
		
		//FollowVehicle
		public RuleCall getFollowVehicleParserRuleCall_1() { return cFollowVehicleParserRuleCall_1; }
	}
	public class PlatoonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Platoon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlatoonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeaderLeadVehicleParserRuleCall_1_0 = (RuleCall)cLeaderAssignment_1.eContents().get(0);
		private final Assignment cFollowersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFollowersFollowVehicleParserRuleCall_2_0 = (RuleCall)cFollowersAssignment_2.eContents().get(0);
		
		//Platoon:
		//	'platoon:'
		//	leader=LeadVehicle
		//	followers+=FollowVehicle*;
		@Override public ParserRule getRule() { return rule; }
		
		//'platoon:' leader=LeadVehicle followers+=FollowVehicle*
		public Group getGroup() { return cGroup; }
		
		//'platoon:'
		public Keyword getPlatoonKeyword_0() { return cPlatoonKeyword_0; }
		
		//leader=LeadVehicle
		public Assignment getLeaderAssignment_1() { return cLeaderAssignment_1; }
		
		//LeadVehicle
		public RuleCall getLeaderLeadVehicleParserRuleCall_1_0() { return cLeaderLeadVehicleParserRuleCall_1_0; }
		
		//followers+=FollowVehicle*
		public Assignment getFollowersAssignment_2() { return cFollowersAssignment_2; }
		
		//FollowVehicle
		public RuleCall getFollowersFollowVehicleParserRuleCall_2_0() { return cFollowersFollowVehicleParserRuleCall_2_0; }
	}
	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRouteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsStepParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		
		//Route:
		//	'route'
		//	name=EString ':'
		//	steps+=Step steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//'route' name=EString ':' steps+=Step steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//'route'
		public Keyword getRouteKeyword_0() { return cRouteKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//steps+=Step
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_3_0() { return cStepsStepParserRuleCall_3_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListConstraintParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//Constraints:
		//	'constraints:'
		//	list=Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints:' list=Constraint
		public Group getGroup() { return cGroup; }
		
		//'constraints:'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//list=Constraint
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//Constraint
		public RuleCall getListConstraintParserRuleCall_1_0() { return cListConstraintParserRuleCall_1_0; }
	}
	public class LeadVehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.LeadVehicle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRouteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRouteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRouteRouteCrossReference_3_0 = (CrossReference)cRouteAssignment_3.eContents().get(0);
		private final RuleCall cRouteRouteEStringParserRuleCall_3_0_1 = (RuleCall)cRouteRouteCrossReference_3_0.eContents().get(1);
		
		//LeadVehicle:
		//	'LV'
		//	name=EString
		//	'route' route=[Route|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'LV' name=EString 'route' route=[Route|EString]
		public Group getGroup() { return cGroup; }
		
		//'LV'
		public Keyword getLVKeyword_0() { return cLVKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'route'
		public Keyword getRouteKeyword_2() { return cRouteKeyword_2; }
		
		//route=[Route|EString]
		public Assignment getRouteAssignment_3() { return cRouteAssignment_3; }
		
		//[Route|EString]
		public CrossReference getRouteRouteCrossReference_3_0() { return cRouteRouteCrossReference_3_0; }
		
		//EString
		public RuleCall getRouteRouteEStringParserRuleCall_3_0_1() { return cRouteRouteEStringParserRuleCall_3_0_1; }
	}
	public class FollowVehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.FollowVehicle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFrontKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRunnerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrontrunnerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFrontrunnerVehicleCrossReference_4_0 = (CrossReference)cFrontrunnerAssignment_4.eContents().get(0);
		private final RuleCall cFrontrunnerVehicleEStringParserRuleCall_4_0_1 = (RuleCall)cFrontrunnerVehicleCrossReference_4_0.eContents().get(1);
		
		//FollowVehicle:
		//	'FV'
		//	name=EString
		//	'front' 'runner' frontrunner=[Vehicle|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'FV' name=EString 'front' 'runner' frontrunner=[Vehicle|EString]
		public Group getGroup() { return cGroup; }
		
		//'FV'
		public Keyword getFVKeyword_0() { return cFVKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'front'
		public Keyword getFrontKeyword_2() { return cFrontKeyword_2; }
		
		//'runner'
		public Keyword getRunnerKeyword_3() { return cRunnerKeyword_3; }
		
		//frontrunner=[Vehicle|EString]
		public Assignment getFrontrunnerAssignment_4() { return cFrontrunnerAssignment_4; }
		
		//[Vehicle|EString]
		public CrossReference getFrontrunnerVehicleCrossReference_4_0() { return cFrontrunnerVehicleCrossReference_4_0; }
		
		//EString
		public RuleCall getFrontrunnerVehicleEStringParserRuleCall_4_0_1() { return cFrontrunnerVehicleEStringParserRuleCall_4_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Forward:
		//	'forward('
		//	distance=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'forward(' distance=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//'forward('
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class TurnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.TurnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TurnLeft:
		//	{TurnLeft}
		//	'turn' 'Left';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnLeft} 'turn' 'Left'
		public Group getGroup() { return cGroup; }
		
		//{TurnLeft}
		public Action getTurnLeftAction_0() { return cTurnLeftAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
		
		//'Left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
	}
	public class TurnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.TurnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TurnRight:
		//	{TurnRight}
		//	'turn' 'Right';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnRight} 'turn' 'Right'
		public Group getGroup() { return cGroup; }
		
		//{TurnRight}
		public Action getTurnRightAction_0() { return cTurnRightAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
		
		//'Right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class HeadwayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tue.glt.platoon.dsl.PDSL.headway");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowboundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowboundEIntParserRuleCall_0_0 = (RuleCall)cLowboundAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHeadwayKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpboundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpboundEIntParserRuleCall_4_0 = (RuleCall)cUpboundAssignment_4.eContents().get(0);
		
		//headway:
		//	lowbound=EInt '<=' 'headway' '<=' upbound=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//lowbound=EInt '<=' 'headway' '<=' upbound=EInt
		public Group getGroup() { return cGroup; }
		
		//lowbound=EInt
		public Assignment getLowboundAssignment_0() { return cLowboundAssignment_0; }
		
		//EInt
		public RuleCall getLowboundEIntParserRuleCall_0_0() { return cLowboundEIntParserRuleCall_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'headway'
		public Keyword getHeadwayKeyword_2() { return cHeadwayKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//upbound=EInt
		public Assignment getUpboundAssignment_4() { return cUpboundAssignment_4; }
		
		//EInt
		public RuleCall getUpboundEIntParserRuleCall_4_0() { return cUpboundEIntParserRuleCall_4_0; }
	}
	
	
	private final WorldElements pWorld;
	private final StepElements pStep;
	private final ConstraintElements pConstraint;
	private final VehicleElements pVehicle;
	private final PlatoonElements pPlatoon;
	private final RouteElements pRoute;
	private final ConstraintsElements pConstraints;
	private final LeadVehicleElements pLeadVehicle;
	private final FollowVehicleElements pFollowVehicle;
	private final EStringElements pEString;
	private final ForwardElements pForward;
	private final TurnLeftElements pTurnLeft;
	private final TurnRightElements pTurnRight;
	private final EIntElements pEInt;
	private final HeadwayElements pHeadway;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorld = new WorldElements();
		this.pStep = new StepElements();
		this.pConstraint = new ConstraintElements();
		this.pVehicle = new VehicleElements();
		this.pPlatoon = new PlatoonElements();
		this.pRoute = new RouteElements();
		this.pConstraints = new ConstraintsElements();
		this.pLeadVehicle = new LeadVehicleElements();
		this.pFollowVehicle = new FollowVehicleElements();
		this.pEString = new EStringElements();
		this.pForward = new ForwardElements();
		this.pTurnLeft = new TurnLeftElements();
		this.pTurnRight = new TurnRightElements();
		this.pEInt = new EIntElements();
		this.pHeadway = new HeadwayElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tue.glt.platoon.dsl.PDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//World:
	//	platoon=Platoon
	//	routes=Route
	//	constraints=Constraints;
	public WorldElements getWorldAccess() {
		return pWorld;
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}
	
	//Step:
	//	Forward | TurnLeft | TurnRight;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//Constraint:
	//	headway;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Vehicle:
	//	LeadVehicle | FollowVehicle;
	public VehicleElements getVehicleAccess() {
		return pVehicle;
	}
	
	public ParserRule getVehicleRule() {
		return getVehicleAccess().getRule();
	}
	
	//Platoon:
	//	'platoon:'
	//	leader=LeadVehicle
	//	followers+=FollowVehicle*;
	public PlatoonElements getPlatoonAccess() {
		return pPlatoon;
	}
	
	public ParserRule getPlatoonRule() {
		return getPlatoonAccess().getRule();
	}
	
	//Route:
	//	'route'
	//	name=EString ':'
	//	steps+=Step steps+=Step*;
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}
	
	//Constraints:
	//	'constraints:'
	//	list=Constraint;
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//LeadVehicle:
	//	'LV'
	//	name=EString
	//	'route' route=[Route|EString];
	public LeadVehicleElements getLeadVehicleAccess() {
		return pLeadVehicle;
	}
	
	public ParserRule getLeadVehicleRule() {
		return getLeadVehicleAccess().getRule();
	}
	
	//FollowVehicle:
	//	'FV'
	//	name=EString
	//	'front' 'runner' frontrunner=[Vehicle|EString];
	public FollowVehicleElements getFollowVehicleAccess() {
		return pFollowVehicle;
	}
	
	public ParserRule getFollowVehicleRule() {
		return getFollowVehicleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Forward:
	//	'forward('
	//	distance=EInt
	//	')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//TurnLeft:
	//	{TurnLeft}
	//	'turn' 'Left';
	public TurnLeftElements getTurnLeftAccess() {
		return pTurnLeft;
	}
	
	public ParserRule getTurnLeftRule() {
		return getTurnLeftAccess().getRule();
	}
	
	//TurnRight:
	//	{TurnRight}
	//	'turn' 'Right';
	public TurnRightElements getTurnRightAccess() {
		return pTurnRight;
	}
	
	public ParserRule getTurnRightRule() {
		return getTurnRightAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//headway:
	//	lowbound=EInt '<=' 'headway' '<=' upbound=EInt;
	public HeadwayElements getHeadwayAccess() {
		return pHeadway;
	}
	
	public ParserRule getHeadwayRule() {
		return getHeadwayAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
