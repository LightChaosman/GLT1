/*
 * generated by Xtext 2.10.0
 */
package tue.glt.platoon.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import platoon.Constraints;
import platoon.FollowVehicle;
import platoon.Forward;
import platoon.LeadVehicle;
import platoon.Platoon;
import platoon.PlatoonPackage;
import platoon.Route;
import platoon.TurnLeft;
import platoon.TurnRight;
import platoon.World;
import platoon.headway;
import tue.glt.platoon.dsl.services.PDSLGrammarAccess;

@SuppressWarnings("all")
public class PDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlatoonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlatoonPackage.CONSTRAINTS:
				sequence_Constraints(context, (Constraints) semanticObject); 
				return; 
			case PlatoonPackage.FOLLOW_VEHICLE:
				sequence_FollowVehicle(context, (FollowVehicle) semanticObject); 
				return; 
			case PlatoonPackage.FORWARD:
				sequence_Forward(context, (Forward) semanticObject); 
				return; 
			case PlatoonPackage.LEAD_VEHICLE:
				sequence_LeadVehicle(context, (LeadVehicle) semanticObject); 
				return; 
			case PlatoonPackage.PLATOON:
				sequence_Platoon(context, (Platoon) semanticObject); 
				return; 
			case PlatoonPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case PlatoonPackage.TURN_LEFT:
				sequence_TurnLeft(context, (TurnLeft) semanticObject); 
				return; 
			case PlatoonPackage.TURN_RIGHT:
				sequence_TurnRight(context, (TurnRight) semanticObject); 
				return; 
			case PlatoonPackage.WORLD:
				sequence_World(context, (World) semanticObject); 
				return; 
			case PlatoonPackage.HEADWAY:
				sequence_headway(context, (headway) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Constraints returns Constraints
	 *
	 * Constraint:
	 *     list=Constraint
	 */
	protected void sequence_Constraints(ISerializationContext context, Constraints semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintsAccess().getListConstraintParserRuleCall_1_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns FollowVehicle
	 *     FollowVehicle returns FollowVehicle
	 *
	 * Constraint:
	 *     (name=EString frontrunner=[Vehicle|EString])
	 */
	protected void sequence_FollowVehicle(ISerializationContext context, FollowVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FOLLOW_VEHICLE__FRONTRUNNER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FOLLOW_VEHICLE__FRONTRUNNER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFollowVehicleAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleEStringParserRuleCall_4_0_1(), semanticObject.getFrontrunner());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Forward
	 *     Forward returns Forward
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_Forward(ISerializationContext context, Forward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FORWARD__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FORWARD__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns LeadVehicle
	 *     LeadVehicle returns LeadVehicle
	 *
	 * Constraint:
	 *     (name=EString route=[Route|EString])
	 */
	protected void sequence_LeadVehicle(ISerializationContext context, LeadVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.LEAD_VEHICLE__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.LEAD_VEHICLE__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeadVehicleAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLeadVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1(), semanticObject.getRoute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Platoon returns Platoon
	 *
	 * Constraint:
	 *     (leader=LeadVehicle followers+=FollowVehicle*)
	 */
	protected void sequence_Platoon(ISerializationContext context, Platoon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (name=EString steps+=Step steps+=Step*)
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns TurnLeft
	 *     TurnLeft returns TurnLeft
	 *
	 * Constraint:
	 *     {TurnLeft}
	 */
	protected void sequence_TurnLeft(ISerializationContext context, TurnLeft semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns TurnRight
	 *     TurnRight returns TurnRight
	 *
	 * Constraint:
	 *     {TurnRight}
	 */
	protected void sequence_TurnRight(ISerializationContext context, TurnRight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     World returns World
	 *
	 * Constraint:
	 *     (platoon=Platoon routes=Route constraints=Constraints)
	 */
	protected void sequence_World(ISerializationContext context, World semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__PLATOON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__PLATOON));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__ROUTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__ROUTES));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__CONSTRAINTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__CONSTRAINTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorldAccess().getPlatoonPlatoonParserRuleCall_0_0(), semanticObject.getPlatoon());
		feeder.accept(grammarAccess.getWorldAccess().getRoutesRouteParserRuleCall_1_0(), semanticObject.getRoutes());
		feeder.accept(grammarAccess.getWorldAccess().getConstraintsConstraintsParserRuleCall_2_0(), semanticObject.getConstraints());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns headway
	 *     headway returns headway
	 *
	 * Constraint:
	 *     (lowbound=EInt upbound=EInt)
	 */
	protected void sequence_headway(ISerializationContext context, headway semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.HEADWAY__LOWBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.HEADWAY__LOWBOUND));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.HEADWAY__UPBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.HEADWAY__UPBOUND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeadwayAccess().getLowboundEIntParserRuleCall_0_0(), semanticObject.getLowbound());
		feeder.accept(grammarAccess.getHeadwayAccess().getUpboundEIntParserRuleCall_4_0(), semanticObject.getUpbound());
		feeder.finish();
	}
	
	
}
