/*
 * generated by Xtext 2.10.0
 */
grammar InternalPDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tue.glt.platoon.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tue.glt.platoon.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tue.glt.platoon.dsl.services.PDSLGrammarAccess;

}
@parser::members {
	private PDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(PDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWorld
entryRuleWorld
:
{ before(grammarAccess.getWorldRule()); }
	 ruleWorld
{ after(grammarAccess.getWorldRule()); } 
	 EOF 
;

// Rule World
ruleWorld 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorldAccess().getGroup()); }
		(rule__World__Group__0)
		{ after(grammarAccess.getWorldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStep
entryRuleStep
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepAccess().getAlternatives()); }
		(rule__Step__Alternatives)
		{ after(grammarAccess.getStepAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getHeadwayParserRuleCall()); }
		ruleheadway
		{ after(grammarAccess.getConstraintAccess().getHeadwayParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlatoon
entryRulePlatoon
:
{ before(grammarAccess.getPlatoonRule()); }
	 rulePlatoon
{ after(grammarAccess.getPlatoonRule()); } 
	 EOF 
;

// Rule Platoon
rulePlatoon 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlatoonAccess().getGroup()); }
		(rule__Platoon__Group__0)
		{ after(grammarAccess.getPlatoonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoute
entryRuleRoute
:
{ before(grammarAccess.getRouteRule()); }
	 ruleRoute
{ after(grammarAccess.getRouteRule()); } 
	 EOF 
;

// Rule Route
ruleRoute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRouteAccess().getGroup()); }
		(rule__Route__Group__0)
		{ after(grammarAccess.getRouteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraints
entryRuleConstraints
:
{ before(grammarAccess.getConstraintsRule()); }
	 ruleConstraints
{ after(grammarAccess.getConstraintsRule()); } 
	 EOF 
;

// Rule Constraints
ruleConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintsAccess().getGroup()); }
		(rule__Constraints__Group__0)
		{ after(grammarAccess.getConstraintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeadVehicle
entryRuleLeadVehicle
:
{ before(grammarAccess.getLeadVehicleRule()); }
	 ruleLeadVehicle
{ after(grammarAccess.getLeadVehicleRule()); } 
	 EOF 
;

// Rule LeadVehicle
ruleLeadVehicle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeadVehicleAccess().getGroup()); }
		(rule__LeadVehicle__Group__0)
		{ after(grammarAccess.getLeadVehicleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFollowVehicle
entryRuleFollowVehicle
:
{ before(grammarAccess.getFollowVehicleRule()); }
	 ruleFollowVehicle
{ after(grammarAccess.getFollowVehicleRule()); } 
	 EOF 
;

// Rule FollowVehicle
ruleFollowVehicle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getGroup()); }
		(rule__FollowVehicle__Group__0)
		{ after(grammarAccess.getFollowVehicleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForward
entryRuleForward
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardAccess().getGroup()); }
		(rule__Forward__Group__0)
		{ after(grammarAccess.getForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnLeft
entryRuleTurnLeft
:
{ before(grammarAccess.getTurnLeftRule()); }
	 ruleTurnLeft
{ after(grammarAccess.getTurnLeftRule()); } 
	 EOF 
;

// Rule TurnLeft
ruleTurnLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnLeftAccess().getGroup()); }
		(rule__TurnLeft__Group__0)
		{ after(grammarAccess.getTurnLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnRight
entryRuleTurnRight
:
{ before(grammarAccess.getTurnRightRule()); }
	 ruleTurnRight
{ after(grammarAccess.getTurnRightRule()); } 
	 EOF 
;

// Rule TurnRight
ruleTurnRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnRightAccess().getGroup()); }
		(rule__TurnRight__Group__0)
		{ after(grammarAccess.getTurnRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleheadway
entryRuleheadway
:
{ before(grammarAccess.getHeadwayRule()); }
	 ruleheadway
{ after(grammarAccess.getHeadwayRule()); } 
	 EOF 
;

// Rule headway
ruleheadway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadwayAccess().getGroup()); }
		(rule__Headway__Group__0)
		{ after(grammarAccess.getHeadwayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getForwardParserRuleCall_0()); }
		ruleForward
		{ after(grammarAccess.getStepAccess().getForwardParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStepAccess().getTurnLeftParserRuleCall_1()); }
		ruleTurnLeft
		{ after(grammarAccess.getStepAccess().getTurnLeftParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStepAccess().getTurnRightParserRuleCall_2()); }
		ruleTurnRight
		{ after(grammarAccess.getStepAccess().getTurnRightParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__0__Impl
	rule__World__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getPlatoonAssignment_0()); }
	(rule__World__PlatoonAssignment_0)
	{ after(grammarAccess.getWorldAccess().getPlatoonAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__1__Impl
	rule__World__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getRoutesAssignment_1()); }
	(rule__World__RoutesAssignment_1)
	{ after(grammarAccess.getWorldAccess().getRoutesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getConstraintsAssignment_2()); }
	(rule__World__ConstraintsAssignment_2)
	{ after(grammarAccess.getWorldAccess().getConstraintsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Platoon__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__0__Impl
	rule__Platoon__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getPlatoonKeyword_0()); }
	'platoon:'
	{ after(grammarAccess.getPlatoonAccess().getPlatoonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__1__Impl
	rule__Platoon__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getLeaderAssignment_1()); }
	(rule__Platoon__LeaderAssignment_1)
	{ after(grammarAccess.getPlatoonAccess().getLeaderAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getFollowersAssignment_2()); }
	(rule__Platoon__FollowersAssignment_2)*
	{ after(grammarAccess.getPlatoonAccess().getFollowersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Route__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__0__Impl
	rule__Route__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getRouteKeyword_0()); }
	'route'
	{ after(grammarAccess.getRouteAccess().getRouteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__1__Impl
	rule__Route__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getNameAssignment_1()); }
	(rule__Route__NameAssignment_1)
	{ after(grammarAccess.getRouteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__2__Impl
	rule__Route__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getRouteAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__3__Impl
	rule__Route__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getStepsAssignment_3()); }
	(rule__Route__StepsAssignment_3)
	{ after(grammarAccess.getRouteAccess().getStepsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getStepsAssignment_4()); }
	(rule__Route__StepsAssignment_4)*
	{ after(grammarAccess.getRouteAccess().getStepsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__0__Impl
	rule__Constraints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getConstraintsKeyword_0()); }
	'constraints:'
	{ after(grammarAccess.getConstraintsAccess().getConstraintsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getListAssignment_1()); }
	(rule__Constraints__ListAssignment_1)
	{ after(grammarAccess.getConstraintsAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeadVehicle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadVehicle__Group__0__Impl
	rule__LeadVehicle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadVehicleAccess().getLVKeyword_0()); }
	'LV'
	{ after(grammarAccess.getLeadVehicleAccess().getLVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadVehicle__Group__1__Impl
	rule__LeadVehicle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadVehicleAccess().getNameAssignment_1()); }
	(rule__LeadVehicle__NameAssignment_1)
	{ after(grammarAccess.getLeadVehicleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadVehicle__Group__2__Impl
	rule__LeadVehicle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadVehicleAccess().getRouteKeyword_2()); }
	'route'
	{ after(grammarAccess.getLeadVehicleAccess().getRouteKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadVehicle__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadVehicleAccess().getRouteAssignment_3()); }
	(rule__LeadVehicle__RouteAssignment_3)
	{ after(grammarAccess.getLeadVehicleAccess().getRouteAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FollowVehicle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__0__Impl
	rule__FollowVehicle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFVKeyword_0()); }
	'FV'
	{ after(grammarAccess.getFollowVehicleAccess().getFVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__1__Impl
	rule__FollowVehicle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getNameAssignment_1()); }
	(rule__FollowVehicle__NameAssignment_1)
	{ after(grammarAccess.getFollowVehicleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__2__Impl
	rule__FollowVehicle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFrontKeyword_2()); }
	'front'
	{ after(grammarAccess.getFollowVehicleAccess().getFrontKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__3__Impl
	rule__FollowVehicle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3()); }
	'runner'
	{ after(grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFrontrunnerAssignment_4()); }
	(rule__FollowVehicle__FrontrunnerAssignment_4)
	{ after(grammarAccess.getFollowVehicleAccess().getFrontrunnerAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
	'forward('
	{ after(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__1__Impl
	rule__Forward__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getDistanceAssignment_1()); }
	(rule__Forward__DistanceAssignment_1)
	{ after(grammarAccess.getForwardAccess().getDistanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getForwardAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnLeft__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeft__Group__0__Impl
	rule__TurnLeft__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftAccess().getTurnLeftAction_0()); }
	()
	{ after(grammarAccess.getTurnLeftAccess().getTurnLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeft__Group__1__Impl
	rule__TurnLeft__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnLeftAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeft__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftAccess().getLeftKeyword_2()); }
	'Left'
	{ after(grammarAccess.getTurnLeftAccess().getLeftKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnRight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnRight__Group__0__Impl
	rule__TurnRight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnRight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnRightAccess().getTurnRightAction_0()); }
	()
	{ after(grammarAccess.getTurnRightAccess().getTurnRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnRight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnRight__Group__1__Impl
	rule__TurnRight__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnRight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnRightAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnRightAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnRight__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnRight__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnRight__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnRightAccess().getRightKeyword_2()); }
	'Right'
	{ after(grammarAccess.getTurnRightAccess().getRightKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Headway__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headway__Group__0__Impl
	rule__Headway__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayAccess().getLowboundAssignment_0()); }
	(rule__Headway__LowboundAssignment_0)
	{ after(grammarAccess.getHeadwayAccess().getLowboundAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headway__Group__1__Impl
	rule__Headway__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_1()); }
	'<='
	{ after(grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headway__Group__2__Impl
	rule__Headway__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayAccess().getHeadwayKeyword_2()); }
	'headway'
	{ after(grammarAccess.getHeadwayAccess().getHeadwayKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headway__Group__3__Impl
	rule__Headway__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_3()); }
	'<='
	{ after(grammarAccess.getHeadwayAccess().getLessThanSignEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headway__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayAccess().getUpboundAssignment_4()); }
	(rule__Headway__UpboundAssignment_4)
	{ after(grammarAccess.getHeadwayAccess().getUpboundAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__World__PlatoonAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getPlatoonPlatoonParserRuleCall_0_0()); }
		rulePlatoon
		{ after(grammarAccess.getWorldAccess().getPlatoonPlatoonParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__RoutesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getRoutesRouteParserRuleCall_1_0()); }
		ruleRoute
		{ after(grammarAccess.getWorldAccess().getRoutesRouteParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__ConstraintsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getConstraintsConstraintsParserRuleCall_2_0()); }
		ruleConstraints
		{ after(grammarAccess.getWorldAccess().getConstraintsConstraintsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__LeaderAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlatoonAccess().getLeaderLeadVehicleParserRuleCall_1_0()); }
		ruleLeadVehicle
		{ after(grammarAccess.getPlatoonAccess().getLeaderLeadVehicleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__FollowersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlatoonAccess().getFollowersFollowVehicleParserRuleCall_2_0()); }
		ruleFollowVehicle
		{ after(grammarAccess.getPlatoonAccess().getFollowersFollowVehicleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRouteAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getRouteAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__StepsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_3_0()); }
		ruleStep
		{ after(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__StepsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_4_0()); }
		ruleStep
		{ after(grammarAccess.getRouteAccess().getStepsStepParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getListConstraintParserRuleCall_1_0()); }
		ruleConstraint
		{ after(grammarAccess.getConstraintsAccess().getListConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeadVehicleAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeadVehicleAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadVehicle__RouteAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeadVehicleAccess().getRouteRouteCrossReference_3_0()); }
		(
			{ before(grammarAccess.getLeadVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getLeadVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getLeadVehicleAccess().getRouteRouteCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFollowVehicleAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__FrontrunnerAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleCrossReference_4_0()); }
		(
			{ before(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getFollowVehicleAccess().getFrontrunnerVehicleCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__DistanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__LowboundAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadwayAccess().getLowboundEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getHeadwayAccess().getLowboundEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headway__UpboundAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadwayAccess().getUpboundEIntParserRuleCall_4_0()); }
		ruleEInt
		{ after(grammarAccess.getHeadwayAccess().getUpboundEIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
