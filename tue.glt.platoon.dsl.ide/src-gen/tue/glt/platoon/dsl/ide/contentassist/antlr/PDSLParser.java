/*
 * generated by Xtext 2.10.0
 */
package tue.glt.platoon.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import tue.glt.platoon.dsl.ide.contentassist.antlr.internal.InternalPDSLParser;
import tue.glt.platoon.dsl.services.PDSLGrammarAccess;

public class PDSLParser extends AbstractContentAssistParser {

	@Inject
	private PDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPDSLParser createParser() {
		InternalPDSLParser result = new InternalPDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
					put(grammarAccess.getVehicleAccess().getAlternatives(), "rule__Vehicle__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getWorldAccess().getGroup(), "rule__World__Group__0");
					put(grammarAccess.getPlatoonAccess().getGroup(), "rule__Platoon__Group__0");
					put(grammarAccess.getRouteAccess().getGroup(), "rule__Route__Group__0");
					put(grammarAccess.getConstraintsAccess().getGroup(), "rule__Constraints__Group__0");
					put(grammarAccess.getLeadVehicleAccess().getGroup(), "rule__LeadVehicle__Group__0");
					put(grammarAccess.getFollowVehicleAccess().getGroup(), "rule__FollowVehicle__Group__0");
					put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
					put(grammarAccess.getTurnLeftAccess().getGroup(), "rule__TurnLeft__Group__0");
					put(grammarAccess.getTurnRightAccess().getGroup(), "rule__TurnRight__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getHeadwayAccess().getGroup(), "rule__Headway__Group__0");
					put(grammarAccess.getWorldAccess().getPlatoonAssignment_0(), "rule__World__PlatoonAssignment_0");
					put(grammarAccess.getWorldAccess().getRoutesAssignment_1(), "rule__World__RoutesAssignment_1");
					put(grammarAccess.getWorldAccess().getConstraintsAssignment_2(), "rule__World__ConstraintsAssignment_2");
					put(grammarAccess.getPlatoonAccess().getLeaderAssignment_1(), "rule__Platoon__LeaderAssignment_1");
					put(grammarAccess.getPlatoonAccess().getFollowersAssignment_2(), "rule__Platoon__FollowersAssignment_2");
					put(grammarAccess.getRouteAccess().getNameAssignment_1(), "rule__Route__NameAssignment_1");
					put(grammarAccess.getRouteAccess().getStepsAssignment_3(), "rule__Route__StepsAssignment_3");
					put(grammarAccess.getRouteAccess().getStepsAssignment_4(), "rule__Route__StepsAssignment_4");
					put(grammarAccess.getConstraintsAccess().getListAssignment_1(), "rule__Constraints__ListAssignment_1");
					put(grammarAccess.getLeadVehicleAccess().getNameAssignment_1(), "rule__LeadVehicle__NameAssignment_1");
					put(grammarAccess.getLeadVehicleAccess().getRouteAssignment_3(), "rule__LeadVehicle__RouteAssignment_3");
					put(grammarAccess.getFollowVehicleAccess().getNameAssignment_1(), "rule__FollowVehicle__NameAssignment_1");
					put(grammarAccess.getFollowVehicleAccess().getFrontrunnerAssignment_4(), "rule__FollowVehicle__FrontrunnerAssignment_4");
					put(grammarAccess.getForwardAccess().getDistanceAssignment_1(), "rule__Forward__DistanceAssignment_1");
					put(grammarAccess.getHeadwayAccess().getLowboundAssignment_0(), "rule__Headway__LowboundAssignment_0");
					put(grammarAccess.getHeadwayAccess().getUpboundAssignment_4(), "rule__Headway__UpboundAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPDSLParser typedParser = (InternalPDSLParser) parser;
			typedParser.entryRuleWorld();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
